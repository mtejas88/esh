'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY',
'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX',
'UT', 'VT', 'VA', 'WA', 'WV', 'WI', "WY")), stringsAsFactors = F)
state_name <- state_lookup$name[state_lookup$code == input$state] #input$state
state_df <- map_data("state", region = state_name)
set.seed(123) #to control jitter
state_base <-  ggplot(data = state_df, aes(x = long, y=lat)) +
geom_polygon(data = state_df, aes(x = long, y = lat, group = group), color = 'black', fill = NA) +
theme_classic() +
theme(line = element_blank(), title = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
legend.text = element_text(size=16), legend.position="bottom") +
guides(shape=guide_legend(override.aes=list(size=7)))
ddt_unscalable <- district_subset() %>%
filter(not_all_scalable == 1)
q <- state_base + geom_point(data = ddt_unscalable, aes(x = longitude, y = latitude, colour = "Districts with at least \n one non-scalable school"),
alpha = 0.8, size = 6) + scale_color_manual(values = c("#0073B6"))
print(q + coord_map())
})
output$n_ddt <- renderText({
district_subset <- district_subset()
paste("n =", toString(nrow(district_subset)))
})
output$n_ddt2 <- renderText({
district_subset <- district_subset()
paste("n =", toString(nrow(district_subset)))
})
output$n_ddt3 <- renderText({
district_subset <- district_subset()
paste("n =", toString(nrow(district_subset)))
})
output$n_ddt4 <- renderText({
district_subset <- district_subset()
paste("n =", toString(nrow(district_subset)))
})
output$n_ddt5 <- renderText({
district_unscalable <- district_subset() %>% filter(percent_scalable_ia != "All Scaleable IA")
paste("n =", toString(nrow(district_unscalable)))
})
#For downloadable subsets
datasetInput <- reactive({
selected_state <- paste0('\"',input$state, '\"')
selected_bandwidths <- paste0("c(",toString(input$bandwidths), ')')
li_bf <- li_bf() %>%
filter_(ifelse(input$state == 'All', "1==1", paste("postal_cd ==", selected_state)))
li_all2 <- li_all()
#li_subset <- li2() %>% mutate(band_factor = as.factor(bandwidth_in_mbps)) %>%
#  filter_(ifelse(input$state == 'All', "1==1", paste("postal_cd ==", selected_state))) %>%
#  filter_(paste("bandwidth_in_mbps %in%", selected_bandwidths))
validate(
need(nrow(li_bf) > 0, "No districts in given subset")
)
#li_subset2 <- li2() %>%
#              filter_(ifelse(input$state == 'All', "1==1", paste("postal_cd ==", selected_state)))
validate(
need(nrow(li_all2) > 0, "No districts in given subset")
)
selected_district_list <- paste0("c(",toString(paste0('\"', input$district_list, '\"')), ')')
district_subset_specific <- district_subset() %>% filter_(paste("name %in%", selected_district_list))
validate(
need(nrow(district_subset_specific) > 0, "No districts in given subset")
)
switch(input$subset,
"Line items for B-W" = li_bf,
"Line items for Comparisons" = li_all,
"Deluxe districts for Selected Districts" = district_subset_specific)
})
output$table <- renderTable({
datasetInput()
})
output$downloadData <- downloadHandler(
filename = function(){
paste(input$subset, '.csv', sep = '')},
content = function(file){
write.csv(datasetInput(), file)
}
)
}) #closing shiny server function
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
wd <- "~/Google Drive/github/ficher/Shiny"
setwd(wd)
lib <- c("dplyr", "shiny", "shinyBS", "tidyr", "ggplot2", "scales", "grid", "maps", "ggmap", "ggvis")
#sapply(lib, function(x) install.packages(x))
sapply(lib, function(x) require(x, character.only = TRUE))
services_check <- read.csv("services_received_shiny.csv", as.is = TRUE)
districts_check <- read.csv("districts_shiny.csv", as.is = TRUE)
# nrow(services) #83203
# nrow(districts) #13025
services_check <- dplyr::filter(services_check, bandwidth_in_mbps == 100)
nrow(services_check)
services_check <- filter(services_check, new_purpose == "Internet")
nrow(services_check)
services_check <- filter(services_check, district_size %in% c("Tiny", "Medium"))
nrow(services_check)
sum(services_check$line_item_total_num_lines)
services_check <- filter(services_check, locale %in% c("Suburban"))
nrow(services_check)
print(sum(services_check$line_item_total_num_lines))
services_check <- filter(services_check, postal_cd %in% c("CA"))
print(sum(services_check$line_item_total_num_lines))
table(services_check$connect_type)
wd <- "~/Google Drive/github/ficher/Shiny"
setwd(wd)
lib <- c("dplyr", "shiny", "shinyBS", "tidyr", "ggplot2", "scales", "grid", "maps", "ggmap", "ggvis")
#sapply(lib, function(x) install.packages(x))
sapply(lib, function(x) require(x, character.only = TRUE))
services_check <- read.csv("services_received_shiny.csv", as.is = TRUE)
districts_check <- read.csv("districts_shiny.csv", as.is = TRUE)
# nrow(services) #83203
# nrow(districts) #13025
services_check <- dplyr::filter(services_check, bandwidth_in_mbps == 100)
nrow(services_check)
services_check <- filter(services_check, new_purpose == "Internet")
nrow(services_check)
services_check <- filter(services_check, district_size %in% c("Tiny", "Medium"))
nrow(services_check)
sum(services_check$line_item_total_num_lines)
services_check <- filter(services_check, locale %in% c("Suburban"))
nrow(services_check)
print(sum(services_check$line_item_total_num_lines))
services_check <- filter(services_check !new_connect_type %in% c("Lit Fiber"))
nrow(services)check)
sum(services_check$line_item_total_num_lines)
nrow(services_check)
sum(services_check$line_item_total_num_lines)
services_check <- filter(services_check !new_connect_type %in% c("Lit Fiber"))
services_check <- filter(services_check, !new_connect_type %in% c("Lit Fiber"))
nrow(services_check)
sum(services_check$line_item_total_num_lines)
shiny::runApp()
shiny::runApp()
### PRELIMINARY AND UNCHECKED ###
# Clear the console
cat("\014")
# Remove every object in the environment
rm(list = ls())
#install and load packages
lib <- c("dplyr", "stringdist", "tidyr", "ggplot2", "maps", "raster", "scales", "RColorBrewer")
#sapply(lib, function(x) install.packages(x))
sapply(lib, function(x) require(x, character.only = TRUE))
# set working directory
setwd("~/Google Drive/R/Service Providers/data/intermediate/")
###
# load data
services <- read.csv("02_clean_services.csv", as.is = TRUE)
deluxe <- read.csv("03_deluxe_neca.csv", as.is = TRUE)
# order locale and districts
deluxe$locale <- factor(deluxe$locale, levels = c("Urban", "Suburban", "Small Town", "Rural"))
deluxe$district_size <- factor(deluxe$district_size, levels = c("Tiny", "Small", "Medium", "Large", "Mega"))
# cross table by state
table(deluxe$receives_neca, deluxe$postal_cd)
# Arkansas
# Iowa
# Montana
# Kansas
# Texas
# E.Ritters Communications/Lit Fiber -- not as compelling
# Marked Tree in Arkansas
# http://www.compareandconnectk12.org/2015/AR/districts/marked-tree-school-district
# Lawrency County in Arkansas
# http://www.compareandconnectk12.org/2015/AR/districts/lawrence-county-school-district
# 10 Mbps(!) Lit fiber from Blackfoot
# http://www.compareandconnectk12.org/2015/MT/districts/potomac-elem
# http://www.compareandconnectk12.org/2015/MT/districts/seeley-lake-elem
# no WAN and only 1 lit fiber circuit
# http://www.compareandconnectk12.org/2015/MT/districts/alberton-k-12-schools
# http://www.compareandconnectk12.org/2015/MT/districts/superior-k-12-schools
# load states for mapping
states <- map_data("state")
# function that creates maps
map_neca_districts <-
function(state, state_cd, title) {
#foo <- function(x) deparse(substitute(x))
#state_input <- foo(state)
#postal_cd_input <- foo(postal_cd)
sub <- map_data('county', state)
#sample_map
map <-
ggplot() +
geom_polygon(data = sub, aes(x = long, y = lat, group = group), fill = "white") +
borders("county", colour="black", alpha = 0.5, size = 0.1, region = state) +
geom_point(data = deluxe[deluxe$postal_cd == state_cd,],
aes(x = longitude, y = latitude, color = as.factor(receives_neca)), size = 3, alpha = 0.5) +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
ggtitle(title) +
theme(plot.title = element_text(lineheight = .8, face = "bold")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "", values = c("#4a4a4a", "#fdb913"),
labels = c("Does not Receive NECA Services", "District Receives NECA Services"))
return(map)
}
# Arkansas
ar_map <- map_neca_districts('arkansas', 'AR', 'Districts that Receive NECA Services in Arkansas')
# Iowa
ia_map <- map_neca_districts('iowa', 'IA', 'Districts that Receive NECA Services in Iowa')
# Montana
mt_map <- map_neca_districts('montana', 'MT', 'Districts that Receive NECA Services in Montana')
# Kansas
ks_map <- map_neca_districts('kansas', 'KS', 'Districts that Receive NECA Services in Kansas')
# Texas
tx_map <- map_neca_districts('texas', 'TX', 'Districts that Receive NECA Services in Texas')
# export maps
setwd("~/Google Drive/R/Service Providers/data/export/pdf")
pdf("neca_district_maps.pdf", onefile = TRUE, paper = "a4r")
print(ar_map)
print(ia_map)
print(ks_map)
print(mt_map)
print(tx_map)
dev.off()
# explore services data
test <- as.data.frame(table(services$neca_study_area))
names(test) <- c("neca_study_area", "frequency")
test <- arrange(test, -frequency)
services_sub <- services[services$neca_study_area %in% test$neca_study_area[1:10], ]
# understandbly in montana, iowa and such
print(ar_map)
print(ks_map)
services <- read.csv("02_clean_services.csv", as.is = TRUE)
setwd("~/Google Drive/R/Service Providers/data/intermediate/")
###
# load data
services <- read.csv("02_clean_services.csv", as.is = TRUE)
services$esh_id == 5101650
### PRELIMINARY AND UNCHECKED ###
# Clear the console
cat("\014")
# Remove every object in the environment
rm(list = ls())
#install and load packages
lib <- c("dplyr", "stringdist", "tidyr", "ggplot2", "maps", "raster", "scales", "RColorBrewer")
#sapply(lib, function(x) install.packages(x))
sapply(lib, function(x) require(x, character.only = TRUE))
# set working directory
setwd("~/Google Drive/R/Service Providers/data/intermediate/")
###
# load data
services <- read.csv("02_clean_services.csv", as.is = TRUE)
deluxe <- read.csv("03_deluxe_neca.csv", as.is = TRUE)
deluxe$locale <- factor(deluxe$locale, levels = c("Urban", "Suburban", "Small Town", "Rural"))
deluxe$district_size <- factor(deluxe$district_size, levels = c("Tiny", "Small", "Medium", "Large", "Mega"))
tx <- deluxe[deluxe$postal_cd == "TX", ]
tx <- deluxe[deluxe$postal_cd == "TX" & deluxe$receives_neca == 1, ]
View(tx)
View(tx)
tx <- arrange(tx, -ia_cost_per_mbps)
View(tx)
View(tx)
table(deluxe$hierarchy_connect_category)
dsl <- [deluxe$hierarchy_connect_category == "DSL" & deluxe$receives_neca ==1, ]
dsl <- deluxe[deluxe$hierarchy_connect_category == "DSL" & deluxe$receives_neca ==1, ]
dsl$bandwidth_in_mbps
dsl <- arrange(dsl, -total_ia_bw_mbps, -ia_cost_per_mbps)
View(dsl)
View(dsl)
services <- read.csv("02_clean_services.csv", as.is = TRUE)
table(services$connect_type)
dsl2 <- services[services$connect_type == "Digital Subscriber Line (DSL)" & services$bandwidth_in_mbps > 50, ]
View(dsl2)
### PRELIMINARY AND UNCHECKED ###
# Clear the console
cat("\014")
# Remove every object in the environment
rm(list = ls())
#install and load packages
lib <- c("dplyr", "stringdist", "tidyr")
#sapply(lib, function(x) install.packages(x))
sapply(lib, function(x) require(x, character.only = TRUE))
# set working directory
setwd("~/Google Drive/R/Service Providers/data/intermediate/")
###
# load data
services <- read.csv("02_clean_services.csv", as.is = TRUE)
deluxe_all <- read.csv("~/Google Drive/R/Service Providers/data/mode/deluxe_districts_20160331.csv", as.is = TRUE)
# filter deluxe
deluxe <- filter(deluxe_all, exclude_from_analysis == FALSE)
# convert columns
deluxe$ia_cost_per_mbps <- as.numeric(deluxe$ia_cost_per_mbps)
deluxe$ia_bandwidth_per_student <- as.numeric(deluxe$ia_bandwidth_per_student)
deluxe$wan_bandwidth_per_student <- as.numeric(deluxe$wan_bandwidth_per_student)
# order locale and districts
deluxe$locale <- factor(deluxe$locale, levels = c("Urban", "Suburban", "Small Town", "Rural"))
deluxe$district_size <- factor(deluxe$district_size, levels = c("Tiny", "Small", "Medium", "Large", "Mega"))
# tag districts that receive neca services
# create combined NECA flag for IA or WAN  - flag each together
deluxe$receives_neca <-
ifelse(# receives NECA IA
((deluxe$esh_id %in% services[services$neca == 1 & services$internet_conditions_met == 'true', ]$esh_id) |
# receives NECA WAN
(deluxe$esh_id %in% services[services$neca == 1 & services$wan_conditions_met == 'true', ]$esh_id)) &
deluxe$locale %in% c("Rural", "Small Town"), 1, 0)
# create columns which indicates bandwith needs for each NECA district
# assuming 1M per student applying concurrency
deluxe$bw_needs_in_mbps <- (deluxe$num_students * 1) / deluxe$ia_oversub_ratio
# round bandwidth needs since circuitz are purchased in round numbers
# note that maximum of bw_neds_in_mbps for deluxe districts that receive NECA internet is ~8000 mbps
# only considers up to 10g circuits :)
# max(deluxe[deluxe$receives_neca == 1, ]$bw_needs_in_mbps)
deluxe$bw_needs_in_mbps_rnd <-
ifelse(deluxe$bw_needs_in_mbps <= 110, 100,
ifelse(deluxe$bw_needs_in_mbps <= 220, 200,
ifelse(deluxe$bw_needs_in_mbps <= 550, 500,
ifelse(deluxe$bw_needs_in_mbps <= 1100, 1000,
ifelse(deluxe$bw_needs_in_mbps <= 2200, 2000,
ifelse(deluxe$bw_needs_in_mbps <= 5500, 5000, 10000))))))
# additional bandwidth_in_mbps column for join!
deluxe$bandwidth_in_mbps <- deluxe$bw_needs_in_mbps_rnd
# target pricing
# national median for lit fiber at various bandwidths
# starting point: lit fiber for IA (Ethernet at 100 mbps or greater or explicilty lit fiber)
lit_ia <-
which(services$internet_conditions_met == 'true' &
# lit fiber
(services$connect_type == 'Lit Fiber Service') &
services$bandwidth_in_mbps %in% c(100, 200, 500, 1000, 2000, 5000, 10000))
# target pricing
# national median as target pricing (lit fiber): 100, 200, 500, 1000, 1500, 2000, 5000, 10000
target_ia_pricing <-
services[lit_ia, ] %>%
group_by(bandwidth_in_mbps) %>%
summarize(national_median_ia_fiber = median(monthly_cost_per_mbps, na.rm = TRUE))
#rename
target_ia_pricing <- dplyr::rename(target_ia_pricing, bw_needs_in_mbps_rnd = bandwidth_in_mbps)
# NECA Current pricing
# calculate NECA cost per mbps for each state (NOT PROVIDER SPECIFIC)
# tariff bands 100, 200, 500, 1000, 1500, 2000, 5000, 10000
costs_ia_neca <-
services[services$neca == 1 &
services$internet_conditions_met == 'true', ] %>%
group_by(postal_cd, bandwidth_in_mbps) %>%
summarize(n = n(),
neca_monthly_cost_per_mbps = median(monthly_cost_per_mbps, na.rm = TRUE))
# merge cost per mbps for each state median - bandwidth bucket
deluxe <- dplyr::left_join(deluxe, costs_ia_neca[, c("postal_cd", "bandwidth_in_mbps", "neca_monthly_cost_per_mbps")],
by = c("postal_cd", "bandwidth_in_mbps"))
deluxe <- rename(deluxe,neca_monthly_cost_per_mbps_0 = neca_monthly_cost_per_mbps)
# check whether NECA IA districts are missing the NECA pricing
# length(which(deluxe$receives_neca == 1 & is.na(deluxe$neca_monthly_cost_per_mbps)))
missing_specific_price <- which(deluxe$receives_neca == 1 & is.na(deluxe$neca_monthly_cost_per_mbps_0))
deluxe[missing_specific_price, ]$bandwidth_in_mbps <- NA
# for those missing specific tariff band pricing,  match to state median NECA pricing (across circuit sizes)
# for whatever bandwidth available
costs_ia_neca_2 <-
services[services$neca == 1 &
services$internet_conditions_met == 'true', ] %>%
group_by(postal_cd) %>%
summarize(n = n(),
neca_monthly_cost_per_mbps= median(monthly_cost_per_mbps, na.rm = TRUE))
deluxe <- dplyr::left_join(deluxe, costs_ia_neca_2[, c("postal_cd", "neca_monthly_cost_per_mbps")],
by = c("postal_cd"))
# fill in blank neca pricing for districts that did not find successful matches during the first join
deluxe$neca_monthly_cost_per_mbps_0 <- ifelse(is.na(deluxe$neca_monthly_cost_per_mbps_0),
deluxe$neca_monthly_cost_per_mbps,
deluxe$neca_monthly_cost_per_mbps_0)
deluxe$neca_monthly_cost_per_mbps <- NULL
deluxe <- dplyr::rename(deluxe, neca_monthly_cost_per_mbps = neca_monthly_cost_per_mbps_0)
# total projected cost of IA, assuming current pricing,
#and  bandwidth needs of 1 mbps per student (+ concurrency ratio)
# use the rounded columns
deluxe$projected_total_ia_monthly_cost <- deluxe$bw_needs_in_mbps_rnd * deluxe$neca_monthly_cost_per_mbps
# merge in state median pricing
deluxe <- dplyr::left_join(deluxe, target_ia_pricing, by = c("bw_needs_in_mbps_rnd"))
# total projected cost of IA, assuming national median pricing for each fiber bucket,  bandwidth needs of 1 mbps per student (+ concurrency ratio)
deluxe$national_target_total_ia_monthly_cost <- deluxe$bw_needs_in_mbps_rnd * deluxe$national_median_ia_fiber
# total projects cost of IA, assuming $3 per mbps
deluxe$target_total_ia_monthly_cost <- deluxe$bw_needs_in_mbps_rnd * 3
############
# research questions
# IA
# cross table!
# table(deluxe[deluxe$receives_neca == 1, ]$locale, deluxe[deluxe$receives_neca == 1, ]$district_size)
# locale restriction
rural <- which(deluxe$locale %in% c("Rural", "Small Town"))
## districts
# how many districts receive IA or WAN service from a NECA provider?
nrow(deluxe[deluxe$receives_neca == 1, ]) #538 districts
nrow(deluxe[rural, ]) #5,278 districts
## campuses (schools)
# How many schools are in NECA-territory districts?
sum(deluxe[deluxe$receives_neca == 1, ]$num_campuses) #1,585 campuses
sum(deluxe[rural, ]$num_campuses) #17,219
# How many students are in NECA-territory districts?
sum(deluxe[deluxe$receives_neca == 1, ]$num_students) #585,045
sum(deluxe[rural, ]$num_students) #7,667,265
# Affordability Analysis
# CURRENT bw purchased by NECA districts
sum(deluxe[deluxe$receives_neca == 1, ]$total_ia_bw_mbps)
# NEEDED bw
sum(deluxe[deluxe$receives_neca == 1, ]$bw_needs_in_mbps)
# NEEDED bw rounded!
sum(deluxe[deluxe$receives_neca == 1, ]$bw_needs_in_mbps_rnd)
# Total monthly IA cost based on rounded BW needs
sum(deluxe[deluxe$receives_neca == 1, ]$projected_total_ia_monthly_cost, na.rm = TRUE)
# How much would that save the schools in districts affected by NECA tariffs(at 1 Mbps per student)?
# national median target pricing
sum(deluxe[deluxe$receives_neca == 1, ]$national_target_total_ia_monthly_cost, na.rm = TRUE)
# $3 per mbps target pricing
sum(deluxe[deluxe$receives_neca == 1, ]$target_total_ia_monthly_cost, na.rm = TRUE)
sum(deluxe[deluxe$receives_neca == 1, ]$projected_total_ia_monthly_cost, na.rm = TRUE) / sum(deluxe[deluxe$receives_neca == 1, ]$national_target_total_ia_monthly_cost, na.rm = TRUE)
# EXTRAPOLATION
# ratio of NECA frequency among rural regions in the clean data
ratio_neca_districts <- nrow(deluxe[deluxe$receives_neca == 1, ]) / nrow(deluxe[rural, ])
ratio_neca_schools <- sum(deluxe[deluxe$receives_neca == 1, ]$num_campuses) / sum(deluxe[rural, ]$num_campuses)
ratio_neca_students <- sum(deluxe[deluxe$receives_neca == 1, ]$num_students) / sum(deluxe[rural, ]$num_students)
ratio_neca_districts
nrow(deluxe_all[deluxe_all$locale %in% c("Rural", "Small Town"), ]) * ratio_neca_districts
lit_ia
target_ia_pricing
costs_ia_neca
costs_ia_neca_2
costs_ia_neca
costs_ia_neca[costs_ia_neca$postal_cd == "MT", ]
costs_ia_neca[costs_ia_neca$postal_cd == "TX", ]
costs_ia_neca2[costs_ia_neca$postal_cd == "MT", ]
costs_ia_neca
costs_ia_neca_2[costs_ia_neca$postal_cd == "MT", ]
costs_ia_neca_2[costs_ia_neca_2$postal_cd == "MT", ]
costs_ia_neca[costs_ia_neca$bandwidth_in_mbps == 10000, ]
costs_ia_neca_2[costs_ia_neca_2$bandwidth_in_mbps == 10000, ]
View(services)
View(services)
View(costs_ia_neca)
View(costs_ia_neca_2)
View(deluxe)
View(deluxe_all)
View(deluxe)
View(deluxe[deluxe$bandwidth_in_mbps == 10000, ])
shiny::runApp('~/Google Drive/github/ficher/Shiny')
shiny::runApp('~/Google Drive/github/ficher/Shiny')
# Clear the console
cat("\014")
# Remove every object in the environment
rm(list = ls())
lib <- c("dplyr", "shiny", "shinyBS", "tidyr", "ggplot2", "scales", "grid", "maps", "ggmap", "ggvis")
#sapply(lib, function(x) install.packages(x))
sapply(lib, function(x) require(x, character.only = TRUE))
wd <- "~/Google Drive/github/ficher/Shiny/prep_for_Shiny"
setwd(wd)
services <- read.csv("services_received_20160404.csv", as.is = TRUE)
districts <- read.csv("deluxe_districts_20160404.csv", as.is = TRUE)
# nrow(services) #83196
# nrow(districts) #13025
### SERVICES RECEIVED
# filter the data, using proper conditions
services <- services %>%
filter(shared_service == "District-dedicated" &
dirty_status == "include clean" & exclude == "FALSE")
# nrow(services) #15812
# length(unique(services$line_item_id)) #13,554
# exclude rows that that contain duplicate line items
services <- services[!duplicated(services$line_item_id), ]
# nrow(services)
# exclude rows that should be excluded for cost calculations
services <- services[!grepl("exclude_for_cost_only", services$open_flags),]
# nrow(services) #12,939
# Convert variables to relevant types
services$ia_bandwidth_per_student <- as.numeric(services$ia_bandwidth_per_student)
services$postal_cd <- as.character(services$postal_cd)
services$band_factor <- as.factor(services$bandwidth_in_mbps)
# Append new column for purpose type
services$new_purpose[services$internet_conditions_met == TRUE] <- "Internet"
services$new_purpose[services$wan_conditions_met == TRUE] <- "WAN"
services$new_purpose[services$isp_conditions_met == TRUE] <- "ISP Only"
services$new_purpose[services$upstream_conditions_met == TRUE] <- "Upstream"
# table(services$new_purpose)
# Create new column for monthly cost per circuit:
services$monthly_cost_per_circuit <- services$line_item_total_monthly_cost / services$line_item_total_num_lines
services$monthly_cost_per_mbps <- services$monthly_cost_per_circuit / services$bandwidth_in_mbps
# Create new column for connection types
services$new_connect_type[services$connect_type %in% c("Cable Modem")] <- "Cable"
services$new_connect_type[services$connect_type %in% c("Digital Subscriber Line (DSL)")] <- "DSL"
services$new_connect_type[services$connect_type %in% c("Dark Fiber Service")] <- "Dark Fiber"
services$new_connect_type[services$connect_type %in% c("Lit Fiber Service")] <- "Lit Fiber"
services$new_connect_type[services$connect_type %in% c("DS-1 (T-1)", "DS-3 (T-3)")] <- "Copper"
services$new_connect_type <- ifelse(is.na(services$new_connect_type), "Other / Uncategorized", services$new_connect_type)
##  SERVICES RECEIVED DATA: END ##
### DELUXE DISTRICTS TABLE:  prepping the data to be the correct subset to use ###
districts$ia_bandwidth_per_student <- as.numeric(districts$ia_bandwidth_per_student)
# New Variables for mapping #
districts$exclude <- ifelse(districts$exclude_from_analysis == "FALSE", "Clean", "Dirty")
districts$meeting_2014_goal_no_oversub <- ifelse(districts$meeting_2014_goal_no_oversub == "TRUE",
"Meeting 2014 Goals",
"Not Meeting 2014 Goals")
districts$meeting_2018_goal_oversub <- ifelse(districts$meeting_2018_goal_oversub == "TRUE",
"Meeting 2018 Goals",
"Not Meeting 2018 Goals")
districts$meeting_2018_goal_oversub <- as.factor(districts$meeting_2018_goal_oversub)
districts$meeting_2014_goal_no_oversub <- as.factor(districts$meeting_2014_goal_no_oversub)
# create indicator for district having at least 1 unscalable campus
districts$not_all_scalable <- ifelse(districts$nga_v2_known_unscalable_campuses + districts$nga_v2_assumed_unscalable_campuses > 0, 1, 0)
# deluxe districts
districts$new_connect_type <- ifelse(districts$hierarchy_connect_category %in% c("None - Error", "Other/Uncategorized"),
"Other / Uncategorized", districts$hierarchy_connect_category)
## END
wd <- "~/Google Drive/github/ficher/Shiny"
setwd(wd)
# export
write.csv(services, "services_received_shiny.csv", row.names = FALSE)
write.csv(districts, "districts_shiny.csv", row.names = FALSE)
table(services$connect_type)
nrow(services_check)
sum(services_check$line_item_total_num_lines)
shiny::runApp()
