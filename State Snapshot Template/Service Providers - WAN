/*
Author: Greg Kurzhals
Created On Date: 01/24/2016
Last Modified Date: 02/01/2016 
Name of QAing Analyst(s): 
Purpose: Ranks service providers by the number of WAN circuits provided to clean districts in each state
Methodology: This query builds upon the "Services Received" query (see note below) to identify the number of
bundled Internet, upstream, and WAN circuits of each connection type serving to each clean district.  Once these 
circuit counts have been determined, several parallel sub-queries pulling from the temp table "af" calculate:
1) the total number and cost of WAN circuits serving clean districts, 2) the number and cost of 
WAN circuits supplied by each provider, and 3) the number of districts and students served by each provider.
These sub-query results are then combined in the main query via lateral joins, allowing for the determination
of each provider's share of: 1) the total cost of WAN services, 2) the number of districts connected 
by WAN services, and 3) the number of students connected by WAN service.  Finally, self-joining
the "provider_summary" sub-query allows for the assignment of ranks to each state's set of service providers
based on the number of WAN circuits supplied to clean districts.

Notes: Sub-queries "district_lookup" to "af" are taken from existing "Services Received" query
(https://modeanalytics.com/educationsuperhighway/reports/7fe09fee682e)
*/

with district_lookup as (
  select esh_id, district_esh_id, postal_cd
  from schools
  union
  select esh_id, esh_id as district_esh_id, postal_cd
  from districts
),
ad as (
  select district_esh_id, a.*
  from allocations a
  join district_lookup dl
  on dl.esh_id = a.recipient_id
),

ae as (
      select district_esh_id,
      line_item_id,
      sum(num_lines_to_allocate) as "district_num_lines_received"
      from ad
      GROUP BY district_esh_id,line_item_id
),

/*Joins "line_items" table to add relevant cost, bandwidth, connection type, and purpose information; joins "districts" table
to add demographic data used in metric calculations*/

--start of sub-query "af"; for clarity, sub-query "af" contains sub-query "z", which contains "y", which contains "b" and "e"

af as (
      select ae.district_esh_id,
      x.name,
      x.postal_cd,
      ae.line_item_id,
      li.consortium_shared,

--classifies circuits as either "Shared IA", "Backbone", or "District-dedicated"
      case when li.consortium_shared=true and ia_conditions_met=true
      then 'Shared IA'
      when li.consortium_shared=true and 'backbone'=any(open_flags)
      then 'Backbone'
      else 'District-dedicated' end as "shared_service",

--limits lines received by district to the total num_lines listed in the line item, unless the line item is allocated to multiple districts
      case when li.consortium_shared=false and ae.district_num_lines_received>=li.num_lines 
      then li.num_lines::varchar
      when li.consortium_shared=true OR 'backbone'=any(open_flags)
      then 'Shared Circuit'
      else ae.district_num_lines_received::varchar end as "quantity_of_lines_received_by_district",

      li.bandwidth_in_mbps,
      li.connect_type,
      li.connect_category,
      li.purpose,
      li.wan,

/*For "District-dedicated circuits", the district share of the line item cost is calculated by multiplying the line item cost by the proportion of the total num_lines allocated to 
the district (see previous comment).  For "Shared IA" and "Backbone" line items, line item cost is divided proportionally between recipient districts based on their number of 
students (e.g. num_students in district/num_students in ALL districts served by line item)*/ 

      case when li.rec_elig_cost!='No data' and li.consortium_shared=false and ae.district_num_lines_received>=li.num_lines and li.total_cost::numeric>0 and li.num_lines!=0 and li.orig_r_months_of_service is not null
      and li.orig_r_months_of_service!=0 
      then li.total_cost::numeric/li.orig_r_months_of_service 
      when li.consortium_shared=false and ae.district_num_lines_received<li.num_lines and li.num_lines!=0 and li.total_cost::numeric>0 
      and li.orig_r_months_of_service is not null and li.orig_r_months_of_service!=0 
      then (ae.district_num_lines_received/li.num_lines)*
      (li.total_cost::numeric/li.orig_r_months_of_service)
      when li.consortium_shared=true OR 'backbone'=any(li.open_flags) then (x.num_students::numeric/z.num_students_served)*(li.total_cost::numeric/li.orig_r_months_of_service)  
      else 0 end as "district_monthly_cost",

--if months of service is null or zero, we assume that the services are in use throughout the entirety of the E-rate cycle

      case when li.orig_r_months_of_service is not null and li.rec_elig_cost!='No data'
      and li.orig_r_months_of_service!=0 then li.total_cost::numeric/li.orig_r_months_of_service 
      else li.total_cost::numeric/12 end as "line_item_total_monthly_cost",

      ae.district_num_lines_received as "cat.1_allocations_to_district",
      li.num_lines as "line_item_total_num_lines",
      li.total_cost as "line_item_total_cost",
      li.rec_elig_cost as "line_item_recurring_elig_cost",
      li.one_time_eligible_cost as "line_item_one-time_cost",
      li.orig_r_months_of_service,
      li.applicant_name,
      li.isp_conditions_met,
      li.internet_conditions_met,
      li.ia_conditions_met,
      li.wan_conditions_met,
      li.upstream_conditions_met,
      li.broadband,
      li.service_provider_name,
      li.exclude,
      li.service_provider_id,
      array_to_string(li.open_flags,', ') as "open_flags",
      
      case when 'exclude'=any(open_flags) then true else false end as "dqs_excluded",
      
      case when x.ia_cost_per_mbps!='Insufficient data' and x.ia_cost_per_mbps!='Infinity' and x.ia_cost_per_mbps!='NaN' 
      then x.ia_cost_per_mbps::numeric/12 else null end as "monthly_ia_cost_per_mbps",

--total IA "backed out" from metrics by multiplying bandwidth per student by num_students
      
      case when x.ia_bandwidth_per_student!='Insufficient data' and x.num_students!='No data' then 
      ((x.ia_bandwidth_per_student::numeric*x.num_students::bigint)/1000)::int
      else null end as "district_total_ia_rounded_to_nearest_mbps",

      x.ia_bandwidth_per_student,
      x.num_students,
      x.num_students_and_staff,
      x.num_schools,
      x.num_campuses,
      x.latitude,
      x.longitude,
      x.locale,
      x.district_size,
      x.exclude_from_analysis,
      x.consortium_member

      from ae

      left join line_items li
      on ae.line_item_id=li.id

      left join districts x
      on ae.district_esh_id=x.esh_id

--this sub-query ("z") is currently being used only to obtain the number of students served by each line item, which is used in calculating district cost for shared line items

      left join lateral (

            select y.line_item_id,
            y.num_students_served

--start of "y"

            from (
/*Group by line_item_id to yield students served by each line item (note that most fields in this sub-query are unused, and have been retained in case we want to build them 
into the main query*/

                  select a.line_item_id,
                  max(f.applicant_name) as "applicant_name",
                  max(f.applicant_id) as "applicant_id",
                  max(f.applicant_postal_cd) as "applicant_postal_cd",
                  array_agg(DISTINCT b.district_esh_id::varchar) as "district_esh_id",
                  count(DISTINCT b.district_esh_id) as "num_district_recipients",
                  sum(DISTINCT c.num_students::bigint) as "num_students_served",
                  array_agg(DISTINCT c.name) as "district_name",
                  array_agg(DISTINCT e.district_ben::varchar) as "district_ben"

                  from allocations a

--first sub-query within "y"

                  left join lateral (
                        select esh_id, district_esh_id, postal_cd
                        from schools
                        union
                        select esh_id, esh_id as district_esh_id, postal_cd
                        from districts
                        union
                        select esh_id, district_esh_id, postal_cd
                        from other_locations
                        where district_esh_id is not null) b
                  on a.recipient_id=b.esh_id

                  left join districts c
                  on b.district_esh_id=c.esh_id

--second sub-query within "y"

                  left join lateral (
                        select array_agg(d.ben) as "district_ben",
                        d.entity_id
                        from esh_id_mappings d
                        GROUP BY d.entity_id) e
                        on c.esh_id=e.entity_id

                  left join line_items f
                  on a.line_item_id=f.id

                  where c.num_students!='No data'
                  GROUP BY a.line_item_id)y 
      )z
      on ae.line_item_id=z.line_item_id

      where li.broadband=true and 
      (li.consortium_shared=false OR li.ia_conditions_met=true OR 'backbone'=any(li.open_flags))  
      and x.include_in_universe_of_districts=true 
      and (case when 'exclude'=any(open_flags) then true else false end)=false
),

--preceding line is end of sub-query "af", the final sub-query used

--main query begins below

state_summary as (
select af.postal_cd,
sum(district_monthly_cost::numeric) as "state_services_cost",
sum(quantity_of_lines_received_by_district::numeric) as "state_num_circuits",
sum(case when connect_category='Fiber' then quantity_of_lines_received_by_district::numeric
else 0 end) as "state_num_fiber_circuits"

from af

where exclude_from_analysis=false and shared_service='District-dedicated'
and wan_conditions_met=true

GROUP BY af.postal_cd),

state_li_all_services as (
select af.postal_cd,
af.line_item_id,
max(af."line_item_total_cost"::numeric) as "total_cost",
max(af.line_item_total_num_lines) as "total_num_circuits"

from af

/*
exclusionary rules: 1) clean districts only, 2) district_dedicated circuits only,
3) bundled IA only
*/

where broadband=true

GROUP BY af.postal_cd, af.line_item_id),

state_summary_all_services as (
select slas.postal_cd,
sum(slas.total_cost) as "state_total_cost_all_services",
sum(slas.total_num_circuits) as "state_total_num_circuits"

from state_li_all_services slas

GROUP BY slas.postal_cd),

cost_summary as (
select spc.reporting_name,
max(spc.name) as "name",
af.postal_cd,
af.line_item_id,
sum(district_monthly_cost::numeric) as "line_item_monthly_share"

from af

left join lateral (
select distinct reporting_name,
name
from service_provider_categories) spc
on af.service_provider_name=spc.name

where shared_service='District-dedicated' and wan_conditions_met=true
and exclude_from_analysis=false

GROUP BY spc.reporting_name, af.postal_cd, af.line_item_id),

total_cost_summary as (
select spc.reporting_name,
max(spc.name) as "sp_name",
af.postal_cd,
af.line_item_id,
max(af.line_item_total_num_lines) as "line_item_num_circuits",
max(af."line_item_total_cost"::numeric) as "line_item_total_cost"

from af

left join lateral (
select distinct reporting_name,
name
from service_provider_categories) spc
on af.service_provider_name=spc.name

/*
same exclusionary rules defined above
*/
where broadband=true

GROUP BY spc.reporting_name, af.postal_cd, af.line_item_id),

provider_goals as (
select spc.reporting_name,
max(spc.name) as "name",
postal_cd,
count(distinct district_esh_id) as "clean_districts_meeting_goals"

from af

left join lateral (
select distinct reporting_name,
name
from service_provider_categories) spc
on af.service_provider_name=spc.name

where ia_bandwidth_per_student!='Insufficient data' and ia_bandwidth_per_student::numeric>=100
and shared_service='District-dedicated' and wan_conditions_met=true

GROUP BY reporting_name, postal_cd),

provider_summary as (
select spc.reporting_name,
max(spc.name) as "name",
row_number() over (partition by af.postal_cd order by sum(quantity_of_lines_received_by_district::numeric) DESC,
sum(distinct num_students::numeric) DESC) as "row_num",
postal_cd,
array_agg(distinct district_esh_id) as "district_list",
sum(distinct num_students::numeric) as "num_students_served",
count(distinct district_esh_id) as "districts_served",
count(distinct line_item_id) as "num_line_items",
sum(quantity_of_lines_received_by_district::numeric) as "num_lines",
sum(case when connect_category='Fiber' then quantity_of_lines_received_by_district::numeric
  else 0 end) as "num_fiber_lines"

from af

left join lateral (
select distinct reporting_name,
name
from service_provider_categories) spc
on af.service_provider_name=spc.name

where shared_service='District-dedicated' and wan_conditions_met=true and exclude_from_analysis=false
and af.service_provider_name not in ('District_owned', 'District Owned', 'District_Owned')

GROUP BY spc.reporting_name, postal_cd),

circuit_ranks as (select ps1.reporting_name,
ps1.postal_cd,
COUNT(distinct ps2.num_lines) as "num_lines_rank"
from provider_summary ps1

join provider_summary ps2
on ps1.num_lines <= ps2.num_lines and ps1.postal_cd=ps2.postal_cd

GROUP BY ps1.reporting_name, ps1.postal_cd)

select
ps.reporting_name, --is null then concat(ps.name,' (DQS-created)') else ps.reporting_name end as "reporting_name",
ps.postal_cd,
ps.row_num,
ps.num_lines,
ps.num_students_served,
ps.districts_served,
ps.district_list,
ps.num_line_items,
ps.num_fiber_lines,
provider_cost.provider_total_cost_per_month,

case when ss.state_services_cost>0 
then provider_cost.provider_total_cost_per_month::numeric/ss.state_services_cost::numeric
else null end as "provider_market_share",

case when ss.state_num_circuits>0 
then ps.num_lines::numeric/ss.state_num_circuits::numeric 
else null end as "provider_circuit_share",

case when ss.state_num_fiber_circuits>0 
then ps.num_fiber_lines::numeric/ss.state_num_fiber_circuits::numeric 
else null end as "provider_fiber_circuit_share",
ps.districts_served::numeric/cd.clean_districts::numeric as "provider_district_share",

case when cd.clean_districts_meeting_connectivity_goal>0
then pg.clean_districts_meeting_goals::numeric/cd.clean_districts_meeting_connectivity_goal::numeric
else null end as "provider_districts_meeting_goals_share",

case when cd.clean_students>0 
then ps.num_students_served::numeric/cd.clean_students::numeric
else null end as "provider_student_share",

tpc.provider_total_num_circuits as "provider_num_circuits_all_categories",
tpc.provider_total_cost_all_services::numeric/12 as "provider_market_share_all_categories",
tpc.provider_total_cost_all_services::numeric/ssas.state_total_cost_all_services::numeric
as "%_provider_market_share_all_categories"

from provider_summary ps

left join lateral (
select cs.reporting_name,
cs.postal_cd,
sum(line_item_monthly_share) as "provider_total_cost_per_month"

from cost_summary cs

GROUP BY cs.reporting_name, cs.postal_cd) provider_cost
on ps.reporting_name=provider_cost.reporting_name and ps.postal_cd=provider_cost.postal_cd

left join lateral (
select tcs.reporting_name,
tcs.postal_cd,
--count(cs.line_item_id) as "num_line_items_all_services",
sum(tcs.line_item_num_circuits) as "provider_total_num_circuits",
sum("line_item_total_cost") as "provider_total_cost_all_services"

from total_cost_summary tcs

GROUP BY tcs.reporting_name, tcs.postal_cd) tpc
on ps.reporting_name=tpc.reporting_name and ps.postal_cd=tpc.postal_cd

left join circuit_ranks cr
on ps.postal_cd=cr.postal_cd and ps.reporting_name=cr.reporting_name

left join state_summary ss
on ps.postal_cd=ss.postal_cd

left join provider_goals pg
on ps.postal_cd=pg.postal_cd and ps.reporting_name=pg.reporting_name

left join state_summary_all_services ssas
on ps.postal_cd=ssas.postal_cd

left join lateral(
select postal_cd,
count(esh_id) as "clean_districts",
sum(case when ia_bandwidth_per_student!='Insufficient data' and ia_bandwidth_per_student::numeric>=100
then 1 else 0 end) as "clean_districts_meeting_connectivity_goal",
sum(num_students::numeric) as "clean_students"

from districts

where include_in_universe_of_districts=true and exclude_from_analysis=false

GROUP BY postal_cd) cd
on ps.postal_cd=cd.postal_cd

where ps.row_num<=3

ORDER BY ps.postal_cd, ps.row_num