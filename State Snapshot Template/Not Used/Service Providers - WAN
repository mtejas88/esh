/*
Author: Greg Kurzhals
Created On Date: 01/24/2016
Last Modified Date: 02/01/2016 
Name of QAing Analyst(s): 
Purpose: Ranks service providers by the number of WAN circuits provided to clean districts in each state
Methodology: This query builds upon the "Services Received" query (see note below) to identify the number of
bundled Internet, upstream, and WAN circuits of each connection type serving to each clean district.  Once these 
circuit counts have been determined, several parallel sub-queries pulling from the temp table "sr" calculate:
1) the total number and cost of WAN circuits serving clean districts, 2) the number and cost of 
WAN circuits supplied by each provider, and 3) the number of districts and students served by each provider.
These sub-query results are then combined in the main query via lateral joins, allowing for the determination
of each provider's share of: 1) the total cost of WAN services, 2) the number of districts connected 
by WAN services, and 3) the number of students connected by WAN service.  Finally, self-joining
the "provider_summary" sub-query allows for the assignment of ranks to each state's set of service providers
based on the number of WAN circuits supplied to clean districts.

Notes: Sub-queries "district_lookup" to "sr" are taken from existing "Services Received" query
(https://modeanalytics.com/educationsuperhighway/reports/7fe09fee682e)
*/

with district_lookup as (
       select esh_id, district_esh_id, postal_cd
        from schools
        union
        select esh_id, esh_id as district_esh_id, postal_cd
        from districts
),
--Groups all circuits in circuits table by distinct recipient district and line item
lines_to_district_by_line_item as (
  select dl.district_esh_id,
         c.line_item_id,
         count(distinct ec.circuit_id) as allocation_lines
        
  from entity_circuits ec
  join circuits c
  on ec.circuit_id = c.id
  join district_lookup dl
  on ec.entity_id = dl.esh_id
  
  group by  district_esh_id,
         line_item_id
),
/*Joins "line_items" table to add relevant cost, bandwidth, connection type, and purpose information; joins "districts" table
to add demographic data used in metric calculations*/
services_received as (
      select ldli.district_esh_id as esh_id,
      d.name,
      d.postal_cd,
      ldli.line_item_id,
      li.consortium_shared,

--classifies circuits as either "Shared IA", "Backbone", or "District-dedicated"
      case when li.consortium_shared=true 
            and li.ia_conditions_met=true
              then 'Shared IA'
           when 'backbone'=any(li.open_flags) or (
              li.consortium_shared=true 
            and li.ia_conditions_met!=true
            )
              then 'Backbone'
              else 'District-dedicated' 
      end as shared_service,

--limits lines received by district to the total num_lines listed in the line item, unless the line item is allocated to multiple districts
      case when li.consortium_shared=true 
            OR 'backbone'=any(open_flags)
              then 'Shared Circuit'
              else ldli.allocation_lines::varchar 
      end as quantity_of_lines_received_by_district,

      li.bandwidth_in_mbps,
      li.connect_type,
      li.connect_category,
      li.purpose,
      li.wan,

/*For "District-dedicated circuits", the district share of the line item cost is calculated by 
multiplying the line item cost by the proportion of the total num_lines allocated to 
the district (see previous comment).  For "Shared IA" and "Backbone" line items, line item cost is divided 
proportionally between recipient districts based on their number of 
students (e.g. num_students in district/num_students in ALL districts served by line item)*/ 

      case when li.consortium_shared=false 
            and (not('backbone'=any(li.open_flags)) or li.open_flags is null)
            and li.total_cost::numeric>0 
            and li.num_lines!=0 
              then (ldli.allocation_lines::numeric/li.num_lines)*(li.total_cost::numeric)
           when li.consortium_shared=true 
            OR 'backbone'=any(li.open_flags) 
              then (d.num_students::numeric/district_info_by_li.num_students_served)*(li.total_cost::numeric) 
              else 0
      end/
      case when li.orig_r_months_of_service is not null 
           and li.orig_r_months_of_service!=0 
            then li.orig_r_months_of_service 
            else 12 
      end as line_item_district_monthly_cost,

--if months of service is null or zero, we assume that the services are in use throughout the entirety of the E-rate cycle

      case when li.orig_r_months_of_service is not null 
           and li.orig_r_months_of_service!=0 
            then li.total_cost::numeric/li.orig_r_months_of_service 
            else li.total_cost::numeric/12 
      end as "line_item_total_monthly_cost",

      ldli.allocation_lines as "cat.1_allocations_to_district",
      li.num_lines as "line_item_total_num_lines",
      li.total_cost as "line_item_total_cost",
      li.rec_elig_cost as "line_item_recurring_elig_cost",
      li.one_time_eligible_cost as "line_item_one-time_cost",
      li.orig_r_months_of_service,
      li.applicant_name,
      li.isp_conditions_met,
      li.internet_conditions_met,
      li.ia_conditions_met,
      li.wan_conditions_met,
      li.upstream_conditions_met,
      li.broadband,
      li.service_provider_name,
      li.exclude,
      array_to_string(li.open_flags,', ') as open_flags,
      
      case when 'exclude'=any(open_flags) then true else false end as dqs_excluded,
      
      case when d.ia_cost_per_mbps!='Insufficient data' 
            and d.ia_cost_per_mbps!='Infinity' 
            and d.ia_cost_per_mbps!='NaN' 
              then d.ia_cost_per_mbps::numeric/12 
              else null 
      end as district_monthly_ia_cost_per_mbps,

--total IA "backed out" from metrics by multiplying bandwidth per student by num_students
      case when d.ia_bandwidth_per_student!='Insufficient data' 
            and d.num_students!='No data' 
              then ((d.ia_bandwidth_per_student::numeric*d.num_students::bigint)/1000)::int
              else null 
      end as district_total_ia_rounded_to_nearest_mbps,

      d.ia_bandwidth_per_student,
      d.num_students,
      d.num_students_and_staff,
      d.num_schools,
      d.latitude,
      d.longitude,
      d.locale,
      d.district_size,
      d.exclude_from_analysis,
      d.consortium_member,
      'n/a' as recipient_districts,
      'n/a' as recipient_postal_cd,
      case 
        when d.exclude_from_analysis = true
          then 'exclude dirty'
          else 'include clean'
      end as dirty_status,
      spc.reporting_name

      from lines_to_district_by_line_item ldli

      left join line_items li
      on ldli.line_item_id=li.id

      left join (
          select distinct name, reporting_name
          from service_provider_categories
      ) spc
      on li.service_provider_name = spc.name

      left join districts d
      on ldli.district_esh_id=d.esh_id

--Group by line_item_id to yield students served by each line item 
      left join (
                  select  ldli.line_item_id,
                          sum(d.num_students::numeric) as num_students_served

                  from lines_to_district_by_line_item ldli

                  left join districts d
                  on ldli.district_esh_id = d.esh_id

                  left join line_items li
                  on ldli.line_item_id = li.id

                  where li.consortium_shared=true 
                     OR 'backbone'=any(li.open_flags)

                  group by ldli.line_item_id
          ) district_info_by_li
      on ldli.line_item_id=district_info_by_li.line_item_id

      where li.broadband=true  
       and (li.consortium_shared=false 
         OR li.ia_conditions_met=true 
         OR li.wan_conditions_met=true 
         OR li.upstream_conditions_met=true 
         OR 'backbone'=any(li.open_flags)
       )  
       and d.include_in_universe_of_districts=true 
       and (case when 'exclude'=any(li.open_flags) then true else false end)=false
),

--main query begins below

state_summary as (
select sr.postal_cd,
sum(line_item_district_monthly_cost::numeric) as "state_services_cost",
sum(quantity_of_lines_received_by_district::numeric) as "state_num_circuits",
sum(case when connect_category='Fiber' then quantity_of_lines_received_by_district::numeric
else 0 end) as "state_num_fiber_circuits"

from services_received sr

where exclude_from_analysis=false and shared_service='District-dedicated'
and wan_conditions_met=true

GROUP BY sr.postal_cd),

state_li_all_services as (
select sr.postal_cd,
sr.line_item_id,
max(sr."line_item_total_cost"::numeric) as "total_cost",
max(sr.line_item_total_num_lines) as "total_num_circuits"

from services_received sr

GROUP BY sr.postal_cd, sr.line_item_id),

state_summary_all_services as (
select slas.postal_cd,
sum(slas.total_cost) as "state_total_cost_all_services",
sum(slas.total_num_circuits) as "state_total_num_circuits"

from state_li_all_services slas

GROUP BY slas.postal_cd),

cost_summary as (
select reporting_name,
max(service_provider_name) as "name",
sr.postal_cd,
sr.line_item_id,
sum(line_item_district_monthly_cost::numeric) as "line_item_monthly_share"

from services_received sr

where shared_service='District-dedicated' and wan_conditions_met=true
and exclude_from_analysis=false

GROUP BY reporting_name, sr.postal_cd, sr.line_item_id),

total_cost_summary as (
select reporting_name,
max(service_provider_name) as "sp_name",
sr.postal_cd,
sr.line_item_id,
max(sr.line_item_total_num_lines) as "line_item_num_circuits",
max(sr."line_item_total_cost"::numeric) as "line_item_total_cost"

from services_received sr

GROUP BY reporting_name, sr.postal_cd, sr.line_item_id),

provider_goals as (
select reporting_name,
max(service_provider_name) as "name",
postal_cd,
count(distinct esh_id) as "clean_districts_meeting_goals"

from services_received sr

where ia_bandwidth_per_student!='Insufficient data' and ia_bandwidth_per_student::numeric>=100
and shared_service='District-dedicated' and wan_conditions_met=true

GROUP BY reporting_name, postal_cd),

provider_summary as (
select reporting_name,
max(service_provider_name) as "name",
row_number() over (partition by sr.postal_cd order by sum(quantity_of_lines_received_by_district::numeric) DESC,
sum(distinct num_students::numeric) DESC) as "row_num",
postal_cd,
array_agg(distinct esh_id) as "district_list",
sum(distinct num_students::numeric) as "num_students_served",
count(distinct esh_id) as "districts_served",
count(distinct line_item_id) as "num_line_items",
sum(quantity_of_lines_received_by_district::numeric) as "num_lines",
sum(case when connect_category='Fiber' then quantity_of_lines_received_by_district::numeric
  else 0 end) as "num_fiber_lines"

from services_received sr

where shared_service='District-dedicated' and wan_conditions_met=true and exclude_from_analysis=false
and sr.service_provider_name not in ('District_owned', 'District Owned', 'District_Owned')

GROUP BY reporting_name, postal_cd),

circuit_ranks as (select ps1.reporting_name,
ps1.postal_cd,
COUNT(distinct ps2.num_lines) as "num_lines_rank"
from provider_summary ps1

join provider_summary ps2
on ps1.num_lines <= ps2.num_lines and ps1.postal_cd=ps2.postal_cd

GROUP BY ps1.reporting_name, ps1.postal_cd)

select
ps.reporting_name, --is null then concat(ps.name,' (DQS-created)') else ps.reporting_name end as "reporting_name",
ps.postal_cd,
ps.row_num,
ps.num_lines,
ps.num_students_served,
ps.districts_served,
ps.district_list,
ps.num_line_items,
ps.num_fiber_lines,
provider_cost.provider_total_cost_per_month,

case when ss.state_services_cost>0 
then provider_cost.provider_total_cost_per_month::numeric/ss.state_services_cost::numeric
else null end as "provider_market_share",

case when ss.state_num_circuits>0 
then ps.num_lines::numeric/ss.state_num_circuits::numeric 
else null end as "provider_circuit_share",

case when ss.state_num_fiber_circuits>0 
then ps.num_fiber_lines::numeric/ss.state_num_fiber_circuits::numeric 
else null end as "provider_fiber_circuit_share",
ps.districts_served::numeric/cd.clean_districts::numeric as "provider_district_share",

case when cd.clean_districts_meeting_connectivity_goal>0
then pg.clean_districts_meeting_goals::numeric/cd.clean_districts_meeting_connectivity_goal::numeric
else null end as "provider_districts_meeting_goals_share",

case when cd.clean_students>0 
then ps.num_students_served::numeric/cd.clean_students::numeric
else null end as "provider_student_share",

tpc.provider_total_num_circuits as "provider_num_circuits_all_categories",
tpc.provider_total_cost_all_services::numeric/12 as "provider_market_share_all_categories",
tpc.provider_total_cost_all_services::numeric/ssas.state_total_cost_all_services::numeric
as "%_provider_market_share_all_categories"

from provider_summary ps

left join lateral (
select cs.reporting_name,
cs.postal_cd,
sum(line_item_monthly_share) as "provider_total_cost_per_month"

from cost_summary cs

GROUP BY cs.reporting_name, cs.postal_cd) provider_cost
on ps.reporting_name=provider_cost.reporting_name and ps.postal_cd=provider_cost.postal_cd

left join lateral (
select tcs.reporting_name,
tcs.postal_cd,
--count(cs.line_item_id) as "num_line_items_all_services",
sum(tcs.line_item_num_circuits) as "provider_total_num_circuits",
sum("line_item_total_cost") as "provider_total_cost_all_services"

from total_cost_summary tcs

GROUP BY tcs.reporting_name, tcs.postal_cd) tpc
on ps.reporting_name=tpc.reporting_name and ps.postal_cd=tpc.postal_cd

left join circuit_ranks cr
on ps.postal_cd=cr.postal_cd and ps.reporting_name=cr.reporting_name

left join state_summary ss
on ps.postal_cd=ss.postal_cd

left join provider_goals pg
on ps.postal_cd=pg.postal_cd and ps.reporting_name=pg.reporting_name

left join state_summary_all_services ssas
on ps.postal_cd=ssas.postal_cd

left join lateral(
select postal_cd,
count(esh_id) as "clean_districts",
sum(case when ia_bandwidth_per_student!='Insufficient data' and ia_bandwidth_per_student::numeric>=100
then 1 else 0 end) as "clean_districts_meeting_connectivity_goal",
sum(num_students::numeric) as "clean_students"

from districts

where include_in_universe_of_districts=true and exclude_from_analysis=false

GROUP BY postal_cd) cd
on ps.postal_cd=cd.postal_cd

where ps.row_num<=3
and ps.postal_cd = 'AZ'

ORDER BY ps.postal_cd, ps.row_num