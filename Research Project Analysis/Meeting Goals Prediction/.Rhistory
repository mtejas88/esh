theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
class(mapdata$scale_cat)
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - Meeting Goals By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
library(maptools)
library(ggplot2)
library(ggmap)
### run brew install gdal if not installed
#install.packages('rgdal')
library(rgdal)
library(dplyr)
setwd("~/Desktop/TX Map")
test <- readOGR(dsn='ESCRegions', layer="ESCRegions")
#test <- readOGR(dsn='MT Legislative Map', layer="cb_2014_30_sldu_500k")
#test <- readOGR(dsn='lower_MT_2014', layer="cb_2014_30_sldl_500k")
test_map <- fortify(test)
#dists <- read.csv("meeting_goals_by_esc.csv")
dists <- read.csv("district_scalability_nopercent.csv")
dists_mt <- dists
dists_mt$lat <- as.numeric(dists_mt$latitude)
dists_mt$lon <- as.numeric(dists_mt$longitude)
dists_mt$percent_scaleable <- as.numeric(as.character(dists_mt$percent_scaleable))
colnames(dists_mt)
View(dists_mt)
View(dists_mt)
### MT No fiber Data ###
mtfiber$fulladd <- paste(mtfiber$Street, mtfiber$City, mtfiber$State, mtfiber$Zip.Code)
mtfiber <- mtfiber[1:145,]
lat_lons <- geocode(mtfiber$fulladd, source="google")
mtfiber_lat <- cbind(mtfiber, lat_lons)
colnames(mtfiber_lat)
mtfiber_lat$lon
### Base Package ###
plot(test, border="gray", col='lightgray', main='Montana Legislative Districts - Lower',
col.main='darkgray', family='Helvetica', font.main=1, cex.main=2)
### Weird tranformation stuff for map projection
proj4string(test)
coordinates(dists_mt) <- ~lon+lat
#coordinates(mtfiber_lat) <- ~lon+lat
class(mtfiber_lat)
proj4string(mtfiber_lat)
proj4string(dists_mt)
# we know that the coordinate system is NAD83 so we can manually
# tell R what the coordinate system is
proj4string(dists_mt) <- CRS("+proj=longlat +datum=NAD83 +ellps=GRS80 +towgs84=0,0,0")
# now we can use the spTransform function to project. We will project
# the mapdata and for coordinate reference system (CRS) we will
# assign the projection from counties
mapdata <- spTransform(dists_mt, CRS(proj4string(test)))
mapdata <- data.frame(mapdata)
### Goals Map ###
mapdata$meet_goals <- ifelse(mapdata$PIEMS.ia_bw_per_student >= 100, 'Meets 2014 Goals',
'Does Not Meet 2014 Goals')
summary(mapdata$meet_goals)
mapdata$meet_goals <- factor(mapdata$meet_goals, level=c("Meets 2014 Goals",
"Does Not Meet 2014 Goals"))
summary(mapdata$meet_goals)
mean(mapdata$meet_goals)
colnames(mapdata)
colors <- c("forestgreen", "gray75")
### Make Goals Map ###
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=meet_goals), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - Meeting Goals By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
### Scalability Map ###
dists_mt$scale_cat <- ifelse(dists_mt$percent_scaleable > 0,
ifelse(dists_mt$percent_scaleable < 1, 'Some Scalable', 'All Scalable'),
'No Scalable')
dists_mt$scale_cat <- factor(dists_mt$scale_cat, levels=
c("No Scalable, Some SCalable, All Scalable"))
colors <- c("firebrick3", "gold1", "chartreuse3")
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - Scalability By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
colors_scale <- c("firebrick3", "gold1", "chartreuse3")
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
dists_mt$scale_cat <- ifelse(dists_mt$percent_scaleable > 0,
ifelse(dists_mt$percent_scaleable < 1, 'Some Scalable', 'All Scalable'),
'No Scalable')
coordinates(dists_mt) <- ~lon+lat
proj4string(dists_mt) <- CRS("+proj=longlat +datum=NAD83 +ellps=GRS80 +towgs84=0,0,0")
mapdata <- spTransform(dists_mt, CRS(proj4string(test)))
mapdata <- data.frame(mapdata)
mapdata <- data.frame(mapdata)
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
colors_scale <- c("chartreuse3","firebrick3","gold1",)
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
colors_scale <- c("gold1","chartreuse3","firebrick3")
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - By ESC") +
guides(fill=guide_legend(title="Meeting Goals Status")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
mapdata$scale_cat <- factor(mapdata$scale_cat, level=
c("No Scalable", "Some Scalable", "All Scalable"))
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas - By ESC") +
guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat, fill=scale_cat), shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas Scalability - By ESC") +
guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
dists <- read.csv("all_clean_districts.csv")
dists_mt <- dists
dists_mt$lat <- as.numeric(dists_mt$latitude)
dists_mt$lon <- as.numeric(dists_mt$longitude)
dists_mt$percent_scaleable <- as.numeric(as.character(dists_mt$percent_scaleable))
coordinates(dists_mt) <- ~lon+lat
proj4string(dists_mt) <- CRS("+proj=longlat +datum=NAD83 +ellps=GRS80 +towgs84=0,0,0")
mapdata <- spTransform(dists_mt, CRS(proj4string(test)))
mapdata <- data.frame(mapdata)
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat), fill="cyan4",shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas ESH Verified - By ESC") +
guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat), fill="cyan4",shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas ESH Verified - By ESC") +
#guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat), fill="cyan4",shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas ESH Verified - By ESC") +
#guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
dists <- read.csv("all_clean_and_dirty.csv")
dists <- read.csv("all_clean_and_dirty.csv")
setwd("~/Desktop/TX Map")
dists <- read.csv("all_clean_and_dirty.csv")
list.files()
dists <- read.csv("all_clean_and_dirty.csv")
dists_mt <- dists
dists_mt$lat <- as.numeric(dists_mt$latitude)
dists_mt$lon <- as.numeric(dists_mt$longitude)
dists_mt$percent_scaleable <- as.numeric(as.character(dists_mt$percent_scaleable))
dists_mt$scale_cat <- ifelse(dists_mt$percent_scaleable > 0,
coordinates(dists_mt) <- ~lon+lat
proj4string(dists_mt) <- CRS("+proj=longlat +datum=NAD83 +ellps=GRS80 +towgs84=0,0,0")
coordinates(dists_mt) <- ~lon+lat
proj4string(dists_mt) <- CRS("+proj=longlat +datum=NAD83 +ellps=GRS80 +towgs84=0,0,0")
mapdata <- spTransform(dists_mt, CRS(proj4string(test)))
mapdata <- data.frame(mapdata)
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat), fill="dodgerblue3",shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas ESH Verified - By ESC") +
#guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
ggplot(test) +  geom_polygon(aes(x=long, y=lat, group=group), colour="black", fill=NA, size=2) +
geom_point(data = mapdata, aes(x = lon, y = lat), fill="dodgerblue3",shape=21, group=NULL,
alpha=0.7, size = 7, position = position_jitter(w = 0.07, h = 0.05)) +
scale_fill_manual(values = colors) +
ggtitle("Texas All Districts - By ESC") +
#guides(fill=guide_legend(title="Scalability")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = NA),
axis.text.x=element_blank(),
plot.title=element_text(size=20),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=14),
legend.title=element_text(size=14))
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
setwd("~/Documents/ficher/Visualization/Line Items Viz App")
ddt <- read.csv("us_ddt.csv")
district_list <- unique(ddt$name)
district)_list[1:10]
district_list[1:10]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Documents/ficher/Research Project Analysis/Meeting Goals Prediction")
library(class)
library(caret)
library(dplyr)
raw <- read.csv('raw_update.csv') # predictors
ver <- read.csv('verified_update.csv') # outcome
sort(raw$esh_id) == sort(ver$esh_id)
raw <- raw %>% arrange(esh_id)
ver <- ver %>% arrange(esh_id)
raw$ia_bandwidth_per_student <- as.numeric(as.character(raw$ia_bandwidth_per_student))
ver$ia_bandwidth_per_student <- as.numeric(as.character(ver$ia_bandwidth_per_student))
table(raw$ia_bandwidth_per_student == ver$ia_bandwidth_per_student)
joined <- merge(ver[,c(1,5)], raw, by.x="esh_id", by.y="esh_id")
joined$band_diff <- joined$ia_bandwidth_per_student.x - joined$ia_bandwidth_per_student.y
diffs <- joined$band_diff[joined$band_diff != 0]
joined$band_diff <- joined$ia_bandwidth_per_student.x - joined$ia_bandwidth_per_student.y
diffs <- joined$band_diff[joined$band_diff != 0]
hist(diffs, col='dodgerblue', border='white', xlab='Diffs in Kbps Per Student', main="Changed Bandwidth Distribution")
data.size <- nrow(joined)
data.size
train.size <- round(data.size *.8, 0)
train.size
dev.size <- data.size - train.size
train_vector <- sample(data.size, train.size)
library(randomForest)
train_vector
connect.forest <- randomForest(as.factor(meets_goals) ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
connect.forest <- randomForest(as.factor(meets_goals) ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
mean(joined$meets_goals)
mean(joined$meets_goals, na.rm = T)
joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
mean(joined$meets_goals, na.rm=T)
joined <- joined[!is.na(joined$meets_goals),]
joined <- joined[!is.na(joined$ia_bandwidth_per_student.y),]
connect.forest <- randomForest(as.factor(meets_goals) ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
mean(joined$meets_goals, na.rm=T)
colnames(joined)
joined <- joined[!is.na(joined$meets_goals),]
joined <- joined[!is.na(joined$ia_bandwidth_per_student.y),]
connect.forest <- randomForest(as.factor(meets_goals) ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
joined[is.na(joined$meets_goals),]
raw <- read.csv('raw_update.csv') # predictors
ver <- read.csv('verified_update.csv') # outcome
sort(raw$esh_id) == sort(ver$esh_id)
raw <- raw %>% arrange(esh_id)
ver <- ver %>% arrange(esh_id)
table(raw$esh_id == ver$esh_id)
class(raw$ia_bandwidth_per_student)
class(ver$ia_bandwidth_per_student)
raw$ia_bandwidth_per_student <- as.numeric(as.character(raw$ia_bandwidth_per_student))
ver$ia_bandwidth_per_student <- as.numeric(as.character(ver$ia_bandwidth_per_student))
table(raw$ia_bandwidth_per_student == ver$ia_bandwidth_per_student)
joined <- merge(ver[,c(1,5)], raw, by.x="esh_id", by.y="esh_id")
joined$band_diff <- joined$ia_bandwidth_per_student.x - joined$ia_bandwidth_per_student.y
diffs <- joined$band_diff[joined$band_diff != 0]
hist(diffs, col='dodgerblue', border='white', xlab='Diffs in Kbps Per Student', main="Changed Bandwidth Distribution")
mean(diffs, na.rm=T)
table(joined$ia_bandwidth_per_student.x == joined$ia_bandwidth_per_student.y)
joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
mean(joined$meets_goals, na.rm=T)
colnames(joined)
joined <- joined[is.na(joined$meets_goals),]
joined <- joined[!is.na(joined$ia_bandwidth_per_student.y),]
#joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
#mean(joined$meets_goals, na.rm = T)
nrow(joined)
### Validation Set ###
data.size <- nrow(joined)
train.size <- round(data.size *.8, 0)
dev.size <- data.size - train.size
train_vector <- sample(data.size, train.size)
connect.forest <- randomForest(as.factor(meets_goals) ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
connect.forest <- randomForest(meets_goals ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
View(joine)
View(joined)
raw <- read.csv('raw_update.csv') # predictors
ver <- read.csv('verified_update.csv') # outcome
View(ver)
raw$ia_bandwidth_per_student <- as.numeric(as.character(raw$ia_bandwidth_per_student))
ver$ia_bandwidth_per_student <- as.numeric(as.character(ver$ia_bandwidth_per_student))
View(raw)
class(raw$ia_bandwidth_per_student)
class(ver$ia_bandwidth_per_student)
raw$ia_bandwidth_per_student <- as.numeric(as.character(raw$ia_bandwidth_per_student))
ver$ia_bandwidth_per_student <- as.numeric(as.character(ver$ia_bandwidth_per_student))
table(raw$ia_bandwidth_per_student == ver$ia_bandwidth_per_student)
joined <- merge(ver[,c(1,5)], raw, by.x="esh_id", by.y="esh_id")
joined$band_diff <- joined$ia_bandwidth_per_student.x - joined$ia_bandwidth_per_student.y
diffs <- joined$band_diff[joined$band_diff != 0]
View(joined)
joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
mean(joined$meets_goals, na.rm=T)
joined <- joined[is.na(joined$meets_goals),]
joined <- joined[!is.na(joined$ia_bandwidth_per_student.y),]
View(joined)
View(ver)
ver <- ver[!is.na(ver$ia_bandwidth_per_student),]
NROW(VER)
nrow(ver)
raw$ia_bandwidth_per_student <- as.numeric(as.character(raw$ia_bandwidth_per_student))
ver$ia_bandwidth_per_student <- as.numeric(as.character(ver$ia_bandwidth_per_student))
table(raw$ia_bandwidth_per_student == ver$ia_bandwidth_per_student)
joined <- merge(ver[,c(1,5)], raw, by.x="esh_id", by.y="esh_id")
joined$meets_goals <- ifelse(joined$ia_bandwidth_per_student.x >= 100, 1, 0)
mean(joined$meets_goals, na.rm=T)
joined <- joined[!is.na(joined$meets_goals),]
joined <- joined[!is.na(joined$ia_bandwidth_per_student.y),]
View(joined)
data.size <- nrow(joined)
train.size <- round(data.size *.8, 0)
dev.size <- data.size - train.size
train_vector <- sample(data.size, train.size)
connect.forest <- randomForest(meets_goals ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
connect.forest <- randomForest(as.factor(meets_goals) ~ ia_bandwidth_per_student.y + locale +
num_students + num_schools + percentage_fiber,
data=joined[train_vector,], importance=T, ntree=501)
summary(connect.forest)
connect.forest$importance
options(scipen=100)
confusionMatrix(predict.forest, reference=joined[-train_vector, 43])
predict.forest <- predict(connect.forest, joined[-train_vector,])
confusionMatrix(predict.forest, reference=joined[-train_vector, 43])
colnames(joined)
confusionMatrix(predict.forest, reference=joined[-train_vector, 42])
connect.forest$importance
confusionMatrix(predict.forest, reference=joined[-train_vector, 42])
randomForest()
randomForest
"randomForest"
method(randomForest)
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
showMethods(randomForest)
showMedthods(randomForest:::randomForest)
showMethods(randomForest:::randomForest)
showMethods('randomForest','randomForest')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
shiny::runApp('~/Documents/ficher/Visualization/Line Items Viz App')
