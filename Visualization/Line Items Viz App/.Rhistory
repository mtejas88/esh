us_ma <- map.text('state', fill = TRUE, col = colors, labels = values)
us_ma <- map.text('state', fill = TRUE, col = colors, labels = values)
us_ma <- map.text('state', fill = TRUE, col = colors, labels = values)
us_ma <- map.text('state', fill = TRUE, col = colors, labels = toString(values))
us_ma <- map.text('state', col = colors, labels = toString(values))
E
length(us_ma$names)
length(label)
length(values)
us_ma <- map.text('state', fill = TRUE, col = colors, labels = toString(values))
us_ma <- map.text('state', fill = TRUE, col = colors, labels = toString(values), add = T)
us_ma <- map.text('state', fill = TRUE, col = colors, add = T)
us_ma <- map.text('state', fill = TRUE, col = "black", add = T)
us_ma <- map.text('state', col = "black", add = T)
us_ma <- map.text('state', fill = TRUE, col = colors)
us_ma <- map('state', fill = TRUE, col = colors)
us_ma <- map.text('state', col = "black", add = T)
values <- sapply(values, function(X) toString(x))
values <- sapply(values, function(x) toString(x))
values
us_ma <- map('state', fill = TRUE, col = colors)
us_ma <- map.text('state', col = "black", labels = values, add = T)
values <- sapply(values, function(x) paste0(toString(round(x,2),"%")
)
)
values <- sapply(values, function(x) ifelse(is.numeric(x)==T, paste0(toString(round(x,2),"%", toString(x)))))
values <- sapply(values, function(x) paste0(ifelse(is.numeric(x)==T,(toString(round(x,2),"%"), toString(x)))))
values <- sapply(values, function(x) paste0(
ifelse(
is.numeric(x)==T,toString(round(x,2),"%"), toString(x)
)
))
values
values <- sapply(values, function(x) paste0(
ifelse(
is.numeric(x)==T,toString(round(x,2),"%"), toString(x)
)
))
values
values <- IA_Connect_Map[,3]
values <- sapply(values, function(x) paste0(
ifelse(
is.numeric(x)==T,toString(round(x,2),"%"), toString(x)
)
))
values <- IA_Connect_Map[,3]
values <- sapply(values, function(x)
ifelse(
is.numeric(x)==T,paste0(toString(round(x,2)),"%"), toString(x)
)
)
values
values <- IA_Connect_Map[,3]
values <- sapply(values, function(x)
ifelse(
is.numeric(x)==T,paste0(toString(round(x,2)*100),"%"), toString(x)
)
)
values
values <- IA_Connect_Map[,3]
values <- sapply(values, function(x)
ifelse(
is.na(x)==F,paste0(toString(round(x,2)*100),"%"), toString(x)
)
)
values
us_ma <- map('state', fill = TRUE, col = colors)
us_ma <- map.text('state', col = "black", labels = values, add = T)
values[is.na(values)] <- ""
values
values[is.na(values)] <- ""
values
values[values == "NA"] <- ""
values
us_ma <- map('state', fill = TRUE, col = colors)
us_ma <- map.text('state', col = "black", labels = values, add = T)
brks<- classIntervals(values, n=3, style="quantile")
brks <- brks$brks
brks<- classIntervals(IA_Connect_Map[,3], n=3, style="quantile")
brks <- brks$brks
us_ma <- map('state', fill = TRUE, col = colors)
us_ma <- map('state', fill = TRUE, col = colors[findInterval(IA_Connect_Map[,3], brks)])
us_ma <- map.text('state', col = "black", labels = values, add = T)
us_ma <- map('state', fill = TRUE, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = T col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = T col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = F, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = F, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = T)
us_ma <- map('state', fill = F, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F, myborder = .0001)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F, myborder = 10)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F, myborder = 5)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F, myborder = 2)
us_ma <- map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
map('state', fill = F, col = "white")
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
map('state', fill = F, col = "green")
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], boundary = F)
map('state', fill = F, col = "green")
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], add = T)
map('state', fill = F, col = "green")
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], add = T)
map('state', fill = F, col = "green")
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], add = T)
map('state', fill = F, col = "green", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], add = T)
map('state', fill = F, col = "white", add = T)
map('state', fill = F, col = "white", add = T)
map('state', fill = F, col = "white", add = T)
map('state', fill = F, col = "white", add = T)
map('state', fill = F, col = "white", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], add = T)
map('state', fill = F, col = "gray", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)], add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = F, col = "gold", add = T)
?brewer.pal
brewer.pal.info
colors <- brewer.pal(9, "greens")
brks<- classIntervals(IA_Connect_Map[,3], n=3, style="quantile")
brks <- brks$brks
map('state', fill = F, col = "gold", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
colors <- brewer.pal(9, "greens")
colors <- brewer.pal(9, "Greens")
brks<- classIntervals(IA_Connect_Map[,3], n=3, style="quantile")
brks <- brks$brks
map('state', fill = F, col = "gold", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = F, col = "darkseagreen2", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = F, col = "darkseagreen2", add = T)
map.text('state', col = "darkslategray", labels = values, add = T)
?map.text
map.text('state', col = "darkslategray", labels = values, cex = .75, add = T)
map('state', fill = F, col = "darkseagreen2", add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = F, col = "darkseagreen2", add = T)
map.text('state', col = "darkslategray", labels = values, cex = .5, add = T)
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = F, col = "darkseagreen2", add = T)
map.text('state', col = "black", labels = values, cex = .5, add = T)
colors <- brewer.pal(4, "Greens")
brks<- classIntervals(IA_Connect_Map[,3], n=3, style="quantile")
brks <- brks$brks
map('state', fill = T, col = colors[findInterval(IA_Connect_Map[,3], brks)])
map('state', fill = F, col = "darkseagreen2", add = T)
library(dplyr)
library(caret)
?data.table
??data.table
hcahps_nat <- read.csv("~/Dropbox/MIDS/hcahps_nat.csv", header=FALSE)
View(hcahps_nat)
hcahps_state <- read.csv("~/Dropbox/MIDS/hcahps_state.csv")
View(hcahps_state)
care_hosp <- read.csv("~/Dropbox/MIDS/care_hosp.csv")
View(care_hosp)
care_state <- read.csv("~/Dropbox/MIDS/care_state.csv", header=FALSE)
View(care_state)
x <- c(3,5,4,3,5,6,5)
y <- c(6,5,4,2,6,7,5)
x <- c(3,5,4,3,5,6,5)
var(x)
var(y)
sum(x - mean(x))
mean((x - mean(x)^2)
mean((x - mean(x))^2)
sum((x - mean(x))^2)
x.mean <- mean(x)
mean((x - x.mean)^2)
mean((x - x.mean)* (x - x.mean))
(x - x.mean) * (x - x.mean)
mean((x - x.mean) * (x - x.mean))
var(x)
?var
sum((x - x.mean) * (x - x.mean)) / (length(x)-1)
sqrt(sum((x - x.mean) * (x - x.mean)) / (length(x)-1))
sd(x)
y.mean <- mean(y)
mean((x-x.mean) * (y-y.mean))
x <- c(44,5,4,3,5,6,5)
y <- c(6,5,4,2,6,7,5)
x.mean <- mean(x)
y.mean <- mean(y)
mean((x-x.mean) * (y-y.mean))
sum((x-x.mean) * (y-y.mean)) / (length(x)-1)
covar(x,y)
co.var(x,y)
covariance(x,y)
cov(x,y)
x <- c(44,5,-1000,3,5,6,5)
y <- c(6,5,4,2,6,7,5)
x.mean <- mean(x)
y.mean <- mean(y)
sum((x-x.mean) * (y-y.mean)) / (length(x)-1)
cov(x,y)
cov(x,x)
x <- c(-100,5,1000,3,5,6,5)
y <- c(6,5,4,2,6,7,5)
x.mean <- mean(x)
y.mean <- mean(y)
cov(x,x)
cov(x,y)
z <- c(80,12,8,40,36,17,5)
cov(x,y,7)
cov(x,y,z)
mat <- cbind(x,y,z)
cov(matg)
cov(mat)
var(x)
install.packages("shiny")
?setwd()
setwd(/Desktop)
setwd("/Desktop")
setwd("users/carsonforter/Desktop")
setwd("Users/carsonforter/Desktop")
getwd()
setwd("Desktop")
runApp("Shiny_Line_Items")
library(shiny)
runApp("Shiny_Line_Items")
install.packages("wesanderson")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
?geom_histogram
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
?element_text
runApp("Shiny_Line_Items")
setwd("Desktop")
runApp("Shiny_Line_Items")
?geom_boxplot
?position_dodge
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
?position_dodge()
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
?scale_x_discrete()
?xlim
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
?geom_boxplot
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
?sliderInput
library(scales)
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
install.packages(showtext)
install.packages('showtext')
?font.add.goole
library(showtext)
font.add.google()
?font.add.google()
font.add.google("Lato", regular.wt=300)
install.packages('RCurl')
font.add.google("Lato", regular.wt=300)
runApp("Shiny_Line_Items")
png
?png
?showtext.begin
runApp("Shiny_Line_Items")
runApp("Shiny_Line_Items")
showtext.begin()
ggplot(li_subset, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Lato"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Lato", colour="#899DA4"),
legend.title = element_text(family="Lato", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
showtext.end()
setwd("~/Desktop/Shiny_Line_Items")
li <- read.csv("li_for_shiny.csv")
li$district_num_students <- as.numeric(as.character(li$district_num_students))
li$bandwidth_in_mbps <- as.numeric(as.character(li$bandwidth_in_mbps))
li$num_lines <- as.numeric(as.character(li$num_lines))
li$district_locale <- as.factor(li$district_locale)
li$district_district_size <- as.factor(li$district_district_size)
li$connect_category <- as.factor(li$connect_category)
li$district_postal_cd <- as.factor(li$district_postal_cd)
li$rec_elig_cost <- as.numeric(as.character(li$rec_elig_cost))
li$cost_per_mbps <- (li$rec_elig_cost / li$num_lines) / li$bandwidth_in_mbps
showtext.begin()
ggplot(li, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Lato"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Lato", colour="#899DA4"),
legend.title = element_text(family="Lato", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
showtext.end()
showtext.begin()
ggplot(li, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Lato"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Lato", colour="#899DA4"),
legend.title = element_text(family="Lato", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
showtext.end()
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Lato"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Lato", colour="#899DA4"),
legend.title = element_text(family="Lato", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
ggplot(li, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Lato"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Lato", colour="#899DA4"),
legend.title = element_text(family="Lato", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
ggplot(li, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Helvetica"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Helvetica", colour="#899DA4"),
legend.title = element_text(family="Helvetica", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
showtext
?showtext
library(devtools)
install_github("Rttf2pt1", "wch")
install_github("extrafont", "wch")
install.packages("devtools")
library(devtools)
install_github("Rttf2pt1", "wch")
install_github("extrafont", "wch")
download.file(url="https://googlefontdirectory.googlecode.com/hg/ofl/lobstertwo/LobsterTwo-Regular.ttf", destfile="C:/Users/matt/font/LobsterTwo-Regular.ttf", mode="wb")
font_import(paths="C:/Users/matt/Downloads/font/",recursive=TRUE, prompt=FALSE)
library(extrafont)
font_import(paths="C:/Users/matt/Downloads/font/",recursive=TRUE, prompt=FALSE)
font_import(paths="",recursive=TRUE, prompt=FALSE)
library(devtools)
install_github("Rttf2pt1", "wch")
install_github("Rttf2pt1", "wch")
install_github("extrafont", "wch")
library(extrafont)
download.file(url="https://googlefontdirectory.googlecode.com/hg/ofl/lobstertwo/LobsterTwo-Regular.ttf", destfile="C:/Users/matt/font/LobsterTwo-Regular.ttf", mode="wb")
download.file(url="https://googlefontdirectory.googlecode.com/hg/ofl/lobstertwo/LobsterTwo-Regular.ttf", destfile="LobsterTwo-Regular.ttf", mode="wb")
download.file(url="http://googlefontdirectory.googlecode.com/hg/ofl/lobstertwo/LobsterTwo-Regular.ttf", destfile="LobsterTwo-Regular.ttf", mode="wb")
showtext.begin()
ggplot(li, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Helvetica"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.text = element_text(family="Helvetica", colour="#899DA4"),
legend.title = element_text(family="Helvetica", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
showtext.end()
warnings()
font.add.google("Lato", regular.wt=300)
showtext.auto()
ggplot(li, aes(x=3,y=cost_per_mbps)) + geom_boxplot(fill="#009291", colour="#ABBFC6", outlier.colour="#009291") +
xlim(1,5) +
scale_y_continuous("",labels=dollar) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(family="Lato"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
#legend.text = element_text(family="Helvetica", colour="#899DA4"),
#legend.title = element_text(family="Helvetica", colour="#899DA4"),
panel.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
legend.background = element_rect(colour = "#FFFFFF", fill ="#FFFFFF"),
plot.margin = unit(c(2.3333,.6,2.3333,.6), "cm")
)
library(showtext)
library(showtext)
font.add.google("Gochi Hand", "gochi")
font.add.google("Schoolbell", "bell")
font.add.google("Covered By Your Grace", "grace")
font.add.google("Rock Salt", "rock")
showtext.auto()
set.seed(123)
x = rnorm(10)
y = 1 + x + rnorm(10, sd = 0.2)
y[1] = 5
mod = lm(y ~ x)
op = par(cex.lab = 2, cex.axis = 1.5, cex.main = 2)
plot(x, y, pch = 16, col = "steelblue",
xlab = "X variable", ylab = "Y variable", family = "gochi")
grid()
title("Draw Plots Before You Fit A Regression", family = "bell")
text(-0.5, 4.5, "This is the outlier", cex = 2, col = "steelblue",
family = "grace")
abline(coef(mod))
abline(1, 1, col = "red")
par(family = "rock")
text(1, 1, expression(paste("True model: ", y == x + 1)),
cex = 1.5, col = "red", srt = 20)
text(0, 2, expression(paste("OLS: ", hat(y) == 0.79 * x + 1.49)),
cex = 1.5, srt = 15)
legend("topright", legend = c("Truth", "OLS"), col = c("red", "black"), lty = 1)
par(op)
